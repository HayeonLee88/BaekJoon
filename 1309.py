# 1309번: 동물원(DP)
'''
행 = N, 열 = 2 (1≤N≤100,000)
사자를 우리에 가둘 떄, 가로로도 세로로도 붙어 있게 배치할 수 없다.
2*N 배열에 사자를 배치하는 경우의 수가 몇 가지인지 알아내는 프로그램을 만들라.
사자를 한 마리도 배치하지 않는 경우도 하나의 경우의 수로 친다.

problem: 첫째 줄에 사자를 배치하는 경우의 수를 9901로 나눈 나머지를 출력하여라.

How? 위에 두 칸을 쌓아 올리면서
     1. 맨 위가 공백일 때: i-1번째의 모든 경우의수
     2. 왼쪽에 사자를 둘 때: i-1번째의 공백과 오른쪽의 경우의 수
     3. 오른쪽에 사자를 둘 때: i-1번째의 공백과 왼쪽의 경우의 수
     를 다이나믹프로그래밍을 통해 구하면 된다.
'''
n = int(input())
dp = [[0] * 3 for _ in range(n + 1)]  # [0, 0, 0]: 맨 위에 사자가 없거나, 왼쪽, 오른쪽에 있는 경우의 수
dp[0][0] = 1  # 사자를 배치하지 못하는 경우 1로 초기화

for i in range(1, n + 1):
    dp[i][0] = sum(dp[i - 1]) % 9901  # i-1번째의 모든 경우의수
    dp[i][1] = dp[i - 1][0] + dp[i - 1][2] % 9901  # i-1번째의 공백과 오른쪽의 경우의 수
    dp[i][2] = dp[i - 1][0] + dp[i - 1][1] % 9901  # i-1번째의 공백과 왼쪽의 경우의 수

print(sum(dp[-1]) % 9901)
